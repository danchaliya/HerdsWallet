"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_json1_1UpdateSubscriberCommand = exports.deserializeAws_json1_1UpdateNotificationCommand = exports.deserializeAws_json1_1UpdateBudgetActionCommand = exports.deserializeAws_json1_1UpdateBudgetCommand = exports.deserializeAws_json1_1ExecuteBudgetActionCommand = exports.deserializeAws_json1_1DescribeSubscribersForNotificationCommand = exports.deserializeAws_json1_1DescribeNotificationsForBudgetCommand = exports.deserializeAws_json1_1DescribeBudgetsCommand = exports.deserializeAws_json1_1DescribeBudgetPerformanceHistoryCommand = exports.deserializeAws_json1_1DescribeBudgetNotificationsForAccountCommand = exports.deserializeAws_json1_1DescribeBudgetActionsForBudgetCommand = exports.deserializeAws_json1_1DescribeBudgetActionsForAccountCommand = exports.deserializeAws_json1_1DescribeBudgetActionHistoriesCommand = exports.deserializeAws_json1_1DescribeBudgetActionCommand = exports.deserializeAws_json1_1DescribeBudgetCommand = exports.deserializeAws_json1_1DeleteSubscriberCommand = exports.deserializeAws_json1_1DeleteNotificationCommand = exports.deserializeAws_json1_1DeleteBudgetActionCommand = exports.deserializeAws_json1_1DeleteBudgetCommand = exports.deserializeAws_json1_1CreateSubscriberCommand = exports.deserializeAws_json1_1CreateNotificationCommand = exports.deserializeAws_json1_1CreateBudgetActionCommand = exports.deserializeAws_json1_1CreateBudgetCommand = exports.serializeAws_json1_1UpdateSubscriberCommand = exports.serializeAws_json1_1UpdateNotificationCommand = exports.serializeAws_json1_1UpdateBudgetActionCommand = exports.serializeAws_json1_1UpdateBudgetCommand = exports.serializeAws_json1_1ExecuteBudgetActionCommand = exports.serializeAws_json1_1DescribeSubscribersForNotificationCommand = exports.serializeAws_json1_1DescribeNotificationsForBudgetCommand = exports.serializeAws_json1_1DescribeBudgetsCommand = exports.serializeAws_json1_1DescribeBudgetPerformanceHistoryCommand = exports.serializeAws_json1_1DescribeBudgetNotificationsForAccountCommand = exports.serializeAws_json1_1DescribeBudgetActionsForBudgetCommand = exports.serializeAws_json1_1DescribeBudgetActionsForAccountCommand = exports.serializeAws_json1_1DescribeBudgetActionHistoriesCommand = exports.serializeAws_json1_1DescribeBudgetActionCommand = exports.serializeAws_json1_1DescribeBudgetCommand = exports.serializeAws_json1_1DeleteSubscriberCommand = exports.serializeAws_json1_1DeleteNotificationCommand = exports.serializeAws_json1_1DeleteBudgetActionCommand = exports.serializeAws_json1_1DeleteBudgetCommand = exports.serializeAws_json1_1CreateSubscriberCommand = exports.serializeAws_json1_1CreateNotificationCommand = exports.serializeAws_json1_1CreateBudgetActionCommand = exports.serializeAws_json1_1CreateBudgetCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const BudgetsServiceException_1 = require("../models/BudgetsServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_json1_1CreateBudgetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.CreateBudget",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateBudgetCommand = serializeAws_json1_1CreateBudgetCommand;
const serializeAws_json1_1CreateBudgetActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.CreateBudgetAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateBudgetActionCommand = serializeAws_json1_1CreateBudgetActionCommand;
const serializeAws_json1_1CreateNotificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.CreateNotification",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateNotificationCommand = serializeAws_json1_1CreateNotificationCommand;
const serializeAws_json1_1CreateSubscriberCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.CreateSubscriber",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateSubscriberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateSubscriberCommand = serializeAws_json1_1CreateSubscriberCommand;
const serializeAws_json1_1DeleteBudgetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DeleteBudget",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteBudgetCommand = serializeAws_json1_1DeleteBudgetCommand;
const serializeAws_json1_1DeleteBudgetActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DeleteBudgetAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteBudgetActionCommand = serializeAws_json1_1DeleteBudgetActionCommand;
const serializeAws_json1_1DeleteNotificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DeleteNotification",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteNotificationCommand = serializeAws_json1_1DeleteNotificationCommand;
const serializeAws_json1_1DeleteSubscriberCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DeleteSubscriber",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteSubscriberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteSubscriberCommand = serializeAws_json1_1DeleteSubscriberCommand;
const serializeAws_json1_1DescribeBudgetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudget",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetCommand = serializeAws_json1_1DescribeBudgetCommand;
const serializeAws_json1_1DescribeBudgetActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgetAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetActionCommand = serializeAws_json1_1DescribeBudgetActionCommand;
const serializeAws_json1_1DescribeBudgetActionHistoriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgetActionHistories",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetActionHistoriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetActionHistoriesCommand = serializeAws_json1_1DescribeBudgetActionHistoriesCommand;
const serializeAws_json1_1DescribeBudgetActionsForAccountCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgetActionsForAccount",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetActionsForAccountRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetActionsForAccountCommand = serializeAws_json1_1DescribeBudgetActionsForAccountCommand;
const serializeAws_json1_1DescribeBudgetActionsForBudgetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgetActionsForBudget",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetActionsForBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetActionsForBudgetCommand = serializeAws_json1_1DescribeBudgetActionsForBudgetCommand;
const serializeAws_json1_1DescribeBudgetNotificationsForAccountCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgetNotificationsForAccount",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetNotificationsForAccountRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetNotificationsForAccountCommand = serializeAws_json1_1DescribeBudgetNotificationsForAccountCommand;
const serializeAws_json1_1DescribeBudgetPerformanceHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgetPerformanceHistory",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetPerformanceHistoryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetPerformanceHistoryCommand = serializeAws_json1_1DescribeBudgetPerformanceHistoryCommand;
const serializeAws_json1_1DescribeBudgetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeBudgets",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeBudgetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeBudgetsCommand = serializeAws_json1_1DescribeBudgetsCommand;
const serializeAws_json1_1DescribeNotificationsForBudgetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeNotificationsForBudget",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeNotificationsForBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeNotificationsForBudgetCommand = serializeAws_json1_1DescribeNotificationsForBudgetCommand;
const serializeAws_json1_1DescribeSubscribersForNotificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.DescribeSubscribersForNotification",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeSubscribersForNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeSubscribersForNotificationCommand = serializeAws_json1_1DescribeSubscribersForNotificationCommand;
const serializeAws_json1_1ExecuteBudgetActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.ExecuteBudgetAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ExecuteBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ExecuteBudgetActionCommand = serializeAws_json1_1ExecuteBudgetActionCommand;
const serializeAws_json1_1UpdateBudgetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.UpdateBudget",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateBudgetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateBudgetCommand = serializeAws_json1_1UpdateBudgetCommand;
const serializeAws_json1_1UpdateBudgetActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.UpdateBudgetAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateBudgetActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateBudgetActionCommand = serializeAws_json1_1UpdateBudgetActionCommand;
const serializeAws_json1_1UpdateNotificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.UpdateNotification",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateNotificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateNotificationCommand = serializeAws_json1_1UpdateNotificationCommand;
const serializeAws_json1_1UpdateSubscriberCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSBudgetServiceGateway.UpdateSubscriber",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateSubscriberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateSubscriberCommand = serializeAws_json1_1UpdateSubscriberCommand;
const deserializeAws_json1_1CreateBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateBudgetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateBudgetCommand = deserializeAws_json1_1CreateBudgetCommand;
const deserializeAws_json1_1CreateBudgetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "CreationLimitExceededException":
        case "com.amazonaws.budgets#CreationLimitExceededException":
            throw await deserializeAws_json1_1CreationLimitExceededExceptionResponse(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await deserializeAws_json1_1DuplicateRecordExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateBudgetActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateBudgetActionCommand = deserializeAws_json1_1CreateBudgetActionCommand;
const deserializeAws_json1_1CreateBudgetActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "CreationLimitExceededException":
        case "com.amazonaws.budgets#CreationLimitExceededException":
            throw await deserializeAws_json1_1CreationLimitExceededExceptionResponse(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await deserializeAws_json1_1DuplicateRecordExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateNotificationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateNotificationCommand = deserializeAws_json1_1CreateNotificationCommand;
const deserializeAws_json1_1CreateNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "CreationLimitExceededException":
        case "com.amazonaws.budgets#CreationLimitExceededException":
            throw await deserializeAws_json1_1CreationLimitExceededExceptionResponse(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await deserializeAws_json1_1DuplicateRecordExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1CreateSubscriberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateSubscriberCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateSubscriberResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateSubscriberCommand = deserializeAws_json1_1CreateSubscriberCommand;
const deserializeAws_json1_1CreateSubscriberCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "CreationLimitExceededException":
        case "com.amazonaws.budgets#CreationLimitExceededException":
            throw await deserializeAws_json1_1CreationLimitExceededExceptionResponse(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await deserializeAws_json1_1DuplicateRecordExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteBudgetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteBudgetCommand = deserializeAws_json1_1DeleteBudgetCommand;
const deserializeAws_json1_1DeleteBudgetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteBudgetActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteBudgetActionCommand = deserializeAws_json1_1DeleteBudgetActionCommand;
const deserializeAws_json1_1DeleteBudgetActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ResourceLockedException":
        case "com.amazonaws.budgets#ResourceLockedException":
            throw await deserializeAws_json1_1ResourceLockedExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteNotificationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteNotificationCommand = deserializeAws_json1_1DeleteNotificationCommand;
const deserializeAws_json1_1DeleteNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DeleteSubscriberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteSubscriberCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteSubscriberResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteSubscriberCommand = deserializeAws_json1_1DeleteSubscriberCommand;
const deserializeAws_json1_1DeleteSubscriberCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetCommand = deserializeAws_json1_1DescribeBudgetCommand;
const deserializeAws_json1_1DescribeBudgetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetActionCommand = deserializeAws_json1_1DescribeBudgetActionCommand;
const deserializeAws_json1_1DescribeBudgetActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetActionHistoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetActionHistoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetActionHistoriesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetActionHistoriesCommand = deserializeAws_json1_1DescribeBudgetActionHistoriesCommand;
const deserializeAws_json1_1DescribeBudgetActionHistoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetActionsForAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetActionsForAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetActionsForAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetActionsForAccountCommand = deserializeAws_json1_1DescribeBudgetActionsForAccountCommand;
const deserializeAws_json1_1DescribeBudgetActionsForAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetActionsForBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetActionsForBudgetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetActionsForBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetActionsForBudgetCommand = deserializeAws_json1_1DescribeBudgetActionsForBudgetCommand;
const deserializeAws_json1_1DescribeBudgetActionsForBudgetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetNotificationsForAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetNotificationsForAccountCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetNotificationsForAccountResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetNotificationsForAccountCommand = deserializeAws_json1_1DescribeBudgetNotificationsForAccountCommand;
const deserializeAws_json1_1DescribeBudgetNotificationsForAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ExpiredNextTokenException":
        case "com.amazonaws.budgets#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetPerformanceHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetPerformanceHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetPerformanceHistoryResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetPerformanceHistoryCommand = deserializeAws_json1_1DescribeBudgetPerformanceHistoryCommand;
const deserializeAws_json1_1DescribeBudgetPerformanceHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ExpiredNextTokenException":
        case "com.amazonaws.budgets#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeBudgetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeBudgetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeBudgetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeBudgetsCommand = deserializeAws_json1_1DescribeBudgetsCommand;
const deserializeAws_json1_1DescribeBudgetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ExpiredNextTokenException":
        case "com.amazonaws.budgets#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeNotificationsForBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeNotificationsForBudgetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeNotificationsForBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeNotificationsForBudgetCommand = deserializeAws_json1_1DescribeNotificationsForBudgetCommand;
const deserializeAws_json1_1DescribeNotificationsForBudgetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ExpiredNextTokenException":
        case "com.amazonaws.budgets#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1DescribeSubscribersForNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSubscribersForNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeSubscribersForNotificationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeSubscribersForNotificationCommand = deserializeAws_json1_1DescribeSubscribersForNotificationCommand;
const deserializeAws_json1_1DescribeSubscribersForNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ExpiredNextTokenException":
        case "com.amazonaws.budgets#ExpiredNextTokenException":
            throw await deserializeAws_json1_1ExpiredNextTokenExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.budgets#InvalidNextTokenException":
            throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1ExecuteBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ExecuteBudgetActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ExecuteBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ExecuteBudgetActionCommand = deserializeAws_json1_1ExecuteBudgetActionCommand;
const deserializeAws_json1_1ExecuteBudgetActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ResourceLockedException":
        case "com.amazonaws.budgets#ResourceLockedException":
            throw await deserializeAws_json1_1ResourceLockedExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateBudgetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateBudgetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateBudgetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateBudgetCommand = deserializeAws_json1_1UpdateBudgetCommand;
const deserializeAws_json1_1UpdateBudgetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateBudgetActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateBudgetActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateBudgetActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateBudgetActionCommand = deserializeAws_json1_1UpdateBudgetActionCommand;
const deserializeAws_json1_1UpdateBudgetActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ResourceLockedException":
        case "com.amazonaws.budgets#ResourceLockedException":
            throw await deserializeAws_json1_1ResourceLockedExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateNotificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateNotificationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateNotificationCommand = deserializeAws_json1_1UpdateNotificationCommand;
const deserializeAws_json1_1UpdateNotificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await deserializeAws_json1_1DuplicateRecordExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1UpdateSubscriberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateSubscriberCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateSubscriberResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateSubscriberCommand = deserializeAws_json1_1UpdateSubscriberCommand;
const deserializeAws_json1_1UpdateSubscriberCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.budgets#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "DuplicateRecordException":
        case "com.amazonaws.budgets#DuplicateRecordException":
            throw await deserializeAws_json1_1DuplicateRecordExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.budgets#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.budgets#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.budgets#NotFoundException":
            throw await deserializeAws_json1_1NotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.budgets#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: BudgetsServiceException_1.BudgetsServiceException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1AccessDeniedException(body, context);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1CreationLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1CreationLimitExceededException(body, context);
    const exception = new models_0_1.CreationLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1DuplicateRecordExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1DuplicateRecordException(body, context);
    const exception = new models_0_1.DuplicateRecordException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ExpiredNextTokenExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ExpiredNextTokenException(body, context);
    const exception = new models_0_1.ExpiredNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InternalErrorExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalErrorException(body, context);
    const exception = new models_0_1.InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidNextTokenExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidNextTokenException(body, context);
    const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidParameterExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
    const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NotFoundException(body, context);
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceLockedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceLockedException(body, context);
    const exception = new models_0_1.ResourceLockedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ThrottlingExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ThrottlingException(body, context);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_json1_1ActionThreshold = (input, context) => {
    return {
        ...(input.ActionThresholdType != null && { ActionThresholdType: input.ActionThresholdType }),
        ...(input.ActionThresholdValue != null && { ActionThresholdValue: (0, smithy_client_1.serializeFloat)(input.ActionThresholdValue) }),
    };
};
const serializeAws_json1_1AutoAdjustData = (input, context) => {
    return {
        ...(input.AutoAdjustType != null && { AutoAdjustType: input.AutoAdjustType }),
        ...(input.HistoricalOptions != null && {
            HistoricalOptions: serializeAws_json1_1HistoricalOptions(input.HistoricalOptions, context),
        }),
        ...(input.LastAutoAdjustTime != null && {
            LastAutoAdjustTime: Math.round(input.LastAutoAdjustTime.getTime() / 1000),
        }),
    };
};
const serializeAws_json1_1Budget = (input, context) => {
    return {
        ...(input.AutoAdjustData != null && {
            AutoAdjustData: serializeAws_json1_1AutoAdjustData(input.AutoAdjustData, context),
        }),
        ...(input.BudgetLimit != null && { BudgetLimit: serializeAws_json1_1Spend(input.BudgetLimit, context) }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.BudgetType != null && { BudgetType: input.BudgetType }),
        ...(input.CalculatedSpend != null && {
            CalculatedSpend: serializeAws_json1_1CalculatedSpend(input.CalculatedSpend, context),
        }),
        ...(input.CostFilters != null && { CostFilters: serializeAws_json1_1CostFilters(input.CostFilters, context) }),
        ...(input.CostTypes != null && { CostTypes: serializeAws_json1_1CostTypes(input.CostTypes, context) }),
        ...(input.LastUpdatedTime != null && { LastUpdatedTime: Math.round(input.LastUpdatedTime.getTime() / 1000) }),
        ...(input.PlannedBudgetLimits != null && {
            PlannedBudgetLimits: serializeAws_json1_1PlannedBudgetLimits(input.PlannedBudgetLimits, context),
        }),
        ...(input.TimePeriod != null && { TimePeriod: serializeAws_json1_1TimePeriod(input.TimePeriod, context) }),
        ...(input.TimeUnit != null && { TimeUnit: input.TimeUnit }),
    };
};
const serializeAws_json1_1CalculatedSpend = (input, context) => {
    return {
        ...(input.ActualSpend != null && { ActualSpend: serializeAws_json1_1Spend(input.ActualSpend, context) }),
        ...(input.ForecastedSpend != null && {
            ForecastedSpend: serializeAws_json1_1Spend(input.ForecastedSpend, context),
        }),
    };
};
const serializeAws_json1_1CostFilters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = serializeAws_json1_1DimensionValues(value, context);
        return acc;
    }, {});
};
const serializeAws_json1_1CostTypes = (input, context) => {
    return {
        ...(input.IncludeCredit != null && { IncludeCredit: input.IncludeCredit }),
        ...(input.IncludeDiscount != null && { IncludeDiscount: input.IncludeDiscount }),
        ...(input.IncludeOtherSubscription != null && { IncludeOtherSubscription: input.IncludeOtherSubscription }),
        ...(input.IncludeRecurring != null && { IncludeRecurring: input.IncludeRecurring }),
        ...(input.IncludeRefund != null && { IncludeRefund: input.IncludeRefund }),
        ...(input.IncludeSubscription != null && { IncludeSubscription: input.IncludeSubscription }),
        ...(input.IncludeSupport != null && { IncludeSupport: input.IncludeSupport }),
        ...(input.IncludeTax != null && { IncludeTax: input.IncludeTax }),
        ...(input.IncludeUpfront != null && { IncludeUpfront: input.IncludeUpfront }),
        ...(input.UseAmortized != null && { UseAmortized: input.UseAmortized }),
        ...(input.UseBlended != null && { UseBlended: input.UseBlended }),
    };
};
const serializeAws_json1_1CreateBudgetActionRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.ActionThreshold != null && {
            ActionThreshold: serializeAws_json1_1ActionThreshold(input.ActionThreshold, context),
        }),
        ...(input.ActionType != null && { ActionType: input.ActionType }),
        ...(input.ApprovalModel != null && { ApprovalModel: input.ApprovalModel }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.Definition != null && { Definition: serializeAws_json1_1Definition(input.Definition, context) }),
        ...(input.ExecutionRoleArn != null && { ExecutionRoleArn: input.ExecutionRoleArn }),
        ...(input.NotificationType != null && { NotificationType: input.NotificationType }),
        ...(input.Subscribers != null && { Subscribers: serializeAws_json1_1Subscribers(input.Subscribers, context) }),
    };
};
const serializeAws_json1_1CreateBudgetRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.Budget != null && { Budget: serializeAws_json1_1Budget(input.Budget, context) }),
        ...(input.NotificationsWithSubscribers != null && {
            NotificationsWithSubscribers: serializeAws_json1_1NotificationWithSubscribersList(input.NotificationsWithSubscribers, context),
        }),
    };
};
const serializeAws_json1_1CreateNotificationRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
        ...(input.Subscribers != null && { Subscribers: serializeAws_json1_1Subscribers(input.Subscribers, context) }),
    };
};
const serializeAws_json1_1CreateSubscriberRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
        ...(input.Subscriber != null && { Subscriber: serializeAws_json1_1Subscriber(input.Subscriber, context) }),
    };
};
const serializeAws_json1_1Definition = (input, context) => {
    return {
        ...(input.IamActionDefinition != null && {
            IamActionDefinition: serializeAws_json1_1IamActionDefinition(input.IamActionDefinition, context),
        }),
        ...(input.ScpActionDefinition != null && {
            ScpActionDefinition: serializeAws_json1_1ScpActionDefinition(input.ScpActionDefinition, context),
        }),
        ...(input.SsmActionDefinition != null && {
            SsmActionDefinition: serializeAws_json1_1SsmActionDefinition(input.SsmActionDefinition, context),
        }),
    };
};
const serializeAws_json1_1DeleteBudgetActionRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.ActionId != null && { ActionId: input.ActionId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
    };
};
const serializeAws_json1_1DeleteBudgetRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
    };
};
const serializeAws_json1_1DeleteNotificationRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
    };
};
const serializeAws_json1_1DeleteSubscriberRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
        ...(input.Subscriber != null && { Subscriber: serializeAws_json1_1Subscriber(input.Subscriber, context) }),
    };
};
const serializeAws_json1_1DescribeBudgetActionHistoriesRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.ActionId != null && { ActionId: input.ActionId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.TimePeriod != null && { TimePeriod: serializeAws_json1_1TimePeriod(input.TimePeriod, context) }),
    };
};
const serializeAws_json1_1DescribeBudgetActionRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.ActionId != null && { ActionId: input.ActionId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
    };
};
const serializeAws_json1_1DescribeBudgetActionsForAccountRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeBudgetActionsForBudgetRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeBudgetNotificationsForAccountRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeBudgetPerformanceHistoryRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.TimePeriod != null && { TimePeriod: serializeAws_json1_1TimePeriod(input.TimePeriod, context) }),
    };
};
const serializeAws_json1_1DescribeBudgetRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
    };
};
const serializeAws_json1_1DescribeBudgetsRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeNotificationsForBudgetRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeSubscribersForNotificationRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
    };
};
const serializeAws_json1_1DimensionValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ExecuteBudgetActionRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.ActionId != null && { ActionId: input.ActionId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.ExecutionType != null && { ExecutionType: input.ExecutionType }),
    };
};
const serializeAws_json1_1Groups = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1HistoricalOptions = (input, context) => {
    return {
        ...(input.BudgetAdjustmentPeriod != null && { BudgetAdjustmentPeriod: input.BudgetAdjustmentPeriod }),
        ...(input.LookBackAvailablePeriods != null && { LookBackAvailablePeriods: input.LookBackAvailablePeriods }),
    };
};
const serializeAws_json1_1IamActionDefinition = (input, context) => {
    return {
        ...(input.Groups != null && { Groups: serializeAws_json1_1Groups(input.Groups, context) }),
        ...(input.PolicyArn != null && { PolicyArn: input.PolicyArn }),
        ...(input.Roles != null && { Roles: serializeAws_json1_1Roles(input.Roles, context) }),
        ...(input.Users != null && { Users: serializeAws_json1_1Users(input.Users, context) }),
    };
};
const serializeAws_json1_1InstanceIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Notification = (input, context) => {
    return {
        ...(input.ComparisonOperator != null && { ComparisonOperator: input.ComparisonOperator }),
        ...(input.NotificationState != null && { NotificationState: input.NotificationState }),
        ...(input.NotificationType != null && { NotificationType: input.NotificationType }),
        ...(input.Threshold != null && { Threshold: (0, smithy_client_1.serializeFloat)(input.Threshold) }),
        ...(input.ThresholdType != null && { ThresholdType: input.ThresholdType }),
    };
};
const serializeAws_json1_1NotificationWithSubscribers = (input, context) => {
    return {
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
        ...(input.Subscribers != null && { Subscribers: serializeAws_json1_1Subscribers(input.Subscribers, context) }),
    };
};
const serializeAws_json1_1NotificationWithSubscribersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1NotificationWithSubscribers(entry, context);
    });
};
const serializeAws_json1_1PlannedBudgetLimits = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = serializeAws_json1_1Spend(value, context);
        return acc;
    }, {});
};
const serializeAws_json1_1Roles = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ScpActionDefinition = (input, context) => {
    return {
        ...(input.PolicyId != null && { PolicyId: input.PolicyId }),
        ...(input.TargetIds != null && { TargetIds: serializeAws_json1_1TargetIds(input.TargetIds, context) }),
    };
};
const serializeAws_json1_1Spend = (input, context) => {
    return {
        ...(input.Amount != null && { Amount: input.Amount }),
        ...(input.Unit != null && { Unit: input.Unit }),
    };
};
const serializeAws_json1_1SsmActionDefinition = (input, context) => {
    return {
        ...(input.ActionSubType != null && { ActionSubType: input.ActionSubType }),
        ...(input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIds(input.InstanceIds, context) }),
        ...(input.Region != null && { Region: input.Region }),
    };
};
const serializeAws_json1_1Subscriber = (input, context) => {
    return {
        ...(input.Address != null && { Address: input.Address }),
        ...(input.SubscriptionType != null && { SubscriptionType: input.SubscriptionType }),
    };
};
const serializeAws_json1_1Subscribers = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Subscriber(entry, context);
    });
};
const serializeAws_json1_1TargetIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TimePeriod = (input, context) => {
    return {
        ...(input.End != null && { End: Math.round(input.End.getTime() / 1000) }),
        ...(input.Start != null && { Start: Math.round(input.Start.getTime() / 1000) }),
    };
};
const serializeAws_json1_1UpdateBudgetActionRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.ActionId != null && { ActionId: input.ActionId }),
        ...(input.ActionThreshold != null && {
            ActionThreshold: serializeAws_json1_1ActionThreshold(input.ActionThreshold, context),
        }),
        ...(input.ApprovalModel != null && { ApprovalModel: input.ApprovalModel }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.Definition != null && { Definition: serializeAws_json1_1Definition(input.Definition, context) }),
        ...(input.ExecutionRoleArn != null && { ExecutionRoleArn: input.ExecutionRoleArn }),
        ...(input.NotificationType != null && { NotificationType: input.NotificationType }),
        ...(input.Subscribers != null && { Subscribers: serializeAws_json1_1Subscribers(input.Subscribers, context) }),
    };
};
const serializeAws_json1_1UpdateBudgetRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.NewBudget != null && { NewBudget: serializeAws_json1_1Budget(input.NewBudget, context) }),
    };
};
const serializeAws_json1_1UpdateNotificationRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.NewNotification != null && {
            NewNotification: serializeAws_json1_1Notification(input.NewNotification, context),
        }),
        ...(input.OldNotification != null && {
            OldNotification: serializeAws_json1_1Notification(input.OldNotification, context),
        }),
    };
};
const serializeAws_json1_1UpdateSubscriberRequest = (input, context) => {
    return {
        ...(input.AccountId != null && { AccountId: input.AccountId }),
        ...(input.BudgetName != null && { BudgetName: input.BudgetName }),
        ...(input.NewSubscriber != null && { NewSubscriber: serializeAws_json1_1Subscriber(input.NewSubscriber, context) }),
        ...(input.Notification != null && { Notification: serializeAws_json1_1Notification(input.Notification, context) }),
        ...(input.OldSubscriber != null && { OldSubscriber: serializeAws_json1_1Subscriber(input.OldSubscriber, context) }),
    };
};
const serializeAws_json1_1Users = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const deserializeAws_json1_1AccessDeniedException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Action = (output, context) => {
    return {
        ActionId: (0, smithy_client_1.expectString)(output.ActionId),
        ActionThreshold: output.ActionThreshold != null
            ? deserializeAws_json1_1ActionThreshold(output.ActionThreshold, context)
            : undefined,
        ActionType: (0, smithy_client_1.expectString)(output.ActionType),
        ApprovalModel: (0, smithy_client_1.expectString)(output.ApprovalModel),
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
        Definition: output.Definition != null ? deserializeAws_json1_1Definition(output.Definition, context) : undefined,
        ExecutionRoleArn: (0, smithy_client_1.expectString)(output.ExecutionRoleArn),
        NotificationType: (0, smithy_client_1.expectString)(output.NotificationType),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Subscribers: output.Subscribers != null ? deserializeAws_json1_1Subscribers(output.Subscribers, context) : undefined,
    };
};
const deserializeAws_json1_1ActionHistories = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ActionHistory(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ActionHistory = (output, context) => {
    return {
        ActionHistoryDetails: output.ActionHistoryDetails != null
            ? deserializeAws_json1_1ActionHistoryDetails(output.ActionHistoryDetails, context)
            : undefined,
        EventType: (0, smithy_client_1.expectString)(output.EventType),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Timestamp: output.Timestamp != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Timestamp))) : undefined,
    };
};
const deserializeAws_json1_1ActionHistoryDetails = (output, context) => {
    return {
        Action: output.Action != null ? deserializeAws_json1_1Action(output.Action, context) : undefined,
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Actions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Action(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ActionThreshold = (output, context) => {
    return {
        ActionThresholdType: (0, smithy_client_1.expectString)(output.ActionThresholdType),
        ActionThresholdValue: (0, smithy_client_1.limitedParseDouble)(output.ActionThresholdValue),
    };
};
const deserializeAws_json1_1AutoAdjustData = (output, context) => {
    return {
        AutoAdjustType: (0, smithy_client_1.expectString)(output.AutoAdjustType),
        HistoricalOptions: output.HistoricalOptions != null
            ? deserializeAws_json1_1HistoricalOptions(output.HistoricalOptions, context)
            : undefined,
        LastAutoAdjustTime: output.LastAutoAdjustTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAutoAdjustTime)))
            : undefined,
    };
};
const deserializeAws_json1_1Budget = (output, context) => {
    return {
        AutoAdjustData: output.AutoAdjustData != null ? deserializeAws_json1_1AutoAdjustData(output.AutoAdjustData, context) : undefined,
        BudgetLimit: output.BudgetLimit != null ? deserializeAws_json1_1Spend(output.BudgetLimit, context) : undefined,
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
        BudgetType: (0, smithy_client_1.expectString)(output.BudgetType),
        CalculatedSpend: output.CalculatedSpend != null
            ? deserializeAws_json1_1CalculatedSpend(output.CalculatedSpend, context)
            : undefined,
        CostFilters: output.CostFilters != null ? deserializeAws_json1_1CostFilters(output.CostFilters, context) : undefined,
        CostTypes: output.CostTypes != null ? deserializeAws_json1_1CostTypes(output.CostTypes, context) : undefined,
        LastUpdatedTime: output.LastUpdatedTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdatedTime)))
            : undefined,
        PlannedBudgetLimits: output.PlannedBudgetLimits != null
            ? deserializeAws_json1_1PlannedBudgetLimits(output.PlannedBudgetLimits, context)
            : undefined,
        TimePeriod: output.TimePeriod != null ? deserializeAws_json1_1TimePeriod(output.TimePeriod, context) : undefined,
        TimeUnit: (0, smithy_client_1.expectString)(output.TimeUnit),
    };
};
const deserializeAws_json1_1BudgetedAndActualAmounts = (output, context) => {
    return {
        ActualAmount: output.ActualAmount != null ? deserializeAws_json1_1Spend(output.ActualAmount, context) : undefined,
        BudgetedAmount: output.BudgetedAmount != null ? deserializeAws_json1_1Spend(output.BudgetedAmount, context) : undefined,
        TimePeriod: output.TimePeriod != null ? deserializeAws_json1_1TimePeriod(output.TimePeriod, context) : undefined,
    };
};
const deserializeAws_json1_1BudgetedAndActualAmountsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BudgetedAndActualAmounts(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BudgetNotificationsForAccount = (output, context) => {
    return {
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
        Notifications: output.Notifications != null ? deserializeAws_json1_1Notifications(output.Notifications, context) : undefined,
    };
};
const deserializeAws_json1_1BudgetNotificationsForAccountList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BudgetNotificationsForAccount(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BudgetPerformanceHistory = (output, context) => {
    return {
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
        BudgetType: (0, smithy_client_1.expectString)(output.BudgetType),
        BudgetedAndActualAmountsList: output.BudgetedAndActualAmountsList != null
            ? deserializeAws_json1_1BudgetedAndActualAmountsList(output.BudgetedAndActualAmountsList, context)
            : undefined,
        CostFilters: output.CostFilters != null ? deserializeAws_json1_1CostFilters(output.CostFilters, context) : undefined,
        CostTypes: output.CostTypes != null ? deserializeAws_json1_1CostTypes(output.CostTypes, context) : undefined,
        TimeUnit: (0, smithy_client_1.expectString)(output.TimeUnit),
    };
};
const deserializeAws_json1_1Budgets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Budget(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CalculatedSpend = (output, context) => {
    return {
        ActualSpend: output.ActualSpend != null ? deserializeAws_json1_1Spend(output.ActualSpend, context) : undefined,
        ForecastedSpend: output.ForecastedSpend != null ? deserializeAws_json1_1Spend(output.ForecastedSpend, context) : undefined,
    };
};
const deserializeAws_json1_1CostFilters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = deserializeAws_json1_1DimensionValues(value, context);
        return acc;
    }, {});
};
const deserializeAws_json1_1CostTypes = (output, context) => {
    return {
        IncludeCredit: (0, smithy_client_1.expectBoolean)(output.IncludeCredit),
        IncludeDiscount: (0, smithy_client_1.expectBoolean)(output.IncludeDiscount),
        IncludeOtherSubscription: (0, smithy_client_1.expectBoolean)(output.IncludeOtherSubscription),
        IncludeRecurring: (0, smithy_client_1.expectBoolean)(output.IncludeRecurring),
        IncludeRefund: (0, smithy_client_1.expectBoolean)(output.IncludeRefund),
        IncludeSubscription: (0, smithy_client_1.expectBoolean)(output.IncludeSubscription),
        IncludeSupport: (0, smithy_client_1.expectBoolean)(output.IncludeSupport),
        IncludeTax: (0, smithy_client_1.expectBoolean)(output.IncludeTax),
        IncludeUpfront: (0, smithy_client_1.expectBoolean)(output.IncludeUpfront),
        UseAmortized: (0, smithy_client_1.expectBoolean)(output.UseAmortized),
        UseBlended: (0, smithy_client_1.expectBoolean)(output.UseBlended),
    };
};
const deserializeAws_json1_1CreateBudgetActionResponse = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        ActionId: (0, smithy_client_1.expectString)(output.ActionId),
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
    };
};
const deserializeAws_json1_1CreateBudgetResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1CreateNotificationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1CreateSubscriberResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1CreationLimitExceededException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Definition = (output, context) => {
    return {
        IamActionDefinition: output.IamActionDefinition != null
            ? deserializeAws_json1_1IamActionDefinition(output.IamActionDefinition, context)
            : undefined,
        ScpActionDefinition: output.ScpActionDefinition != null
            ? deserializeAws_json1_1ScpActionDefinition(output.ScpActionDefinition, context)
            : undefined,
        SsmActionDefinition: output.SsmActionDefinition != null
            ? deserializeAws_json1_1SsmActionDefinition(output.SsmActionDefinition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DeleteBudgetActionResponse = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        Action: output.Action != null ? deserializeAws_json1_1Action(output.Action, context) : undefined,
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
    };
};
const deserializeAws_json1_1DeleteBudgetResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteNotificationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteSubscriberResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DescribeBudgetActionHistoriesResponse = (output, context) => {
    return {
        ActionHistories: output.ActionHistories != null
            ? deserializeAws_json1_1ActionHistories(output.ActionHistories, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeBudgetActionResponse = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        Action: output.Action != null ? deserializeAws_json1_1Action(output.Action, context) : undefined,
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
    };
};
const deserializeAws_json1_1DescribeBudgetActionsForAccountResponse = (output, context) => {
    return {
        Actions: output.Actions != null ? deserializeAws_json1_1Actions(output.Actions, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeBudgetActionsForBudgetResponse = (output, context) => {
    return {
        Actions: output.Actions != null ? deserializeAws_json1_1Actions(output.Actions, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeBudgetNotificationsForAccountResponse = (output, context) => {
    return {
        BudgetNotificationsForAccount: output.BudgetNotificationsForAccount != null
            ? deserializeAws_json1_1BudgetNotificationsForAccountList(output.BudgetNotificationsForAccount, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeBudgetPerformanceHistoryResponse = (output, context) => {
    return {
        BudgetPerformanceHistory: output.BudgetPerformanceHistory != null
            ? deserializeAws_json1_1BudgetPerformanceHistory(output.BudgetPerformanceHistory, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeBudgetResponse = (output, context) => {
    return {
        Budget: output.Budget != null ? deserializeAws_json1_1Budget(output.Budget, context) : undefined,
    };
};
const deserializeAws_json1_1DescribeBudgetsResponse = (output, context) => {
    return {
        Budgets: output.Budgets != null ? deserializeAws_json1_1Budgets(output.Budgets, context) : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1DescribeNotificationsForBudgetResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Notifications: output.Notifications != null ? deserializeAws_json1_1Notifications(output.Notifications, context) : undefined,
    };
};
const deserializeAws_json1_1DescribeSubscribersForNotificationResponse = (output, context) => {
    return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Subscribers: output.Subscribers != null ? deserializeAws_json1_1Subscribers(output.Subscribers, context) : undefined,
    };
};
const deserializeAws_json1_1DimensionValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DuplicateRecordException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1ExecuteBudgetActionResponse = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        ActionId: (0, smithy_client_1.expectString)(output.ActionId),
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
        ExecutionType: (0, smithy_client_1.expectString)(output.ExecutionType),
    };
};
const deserializeAws_json1_1ExpiredNextTokenException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Groups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1HistoricalOptions = (output, context) => {
    return {
        BudgetAdjustmentPeriod: (0, smithy_client_1.expectInt32)(output.BudgetAdjustmentPeriod),
        LookBackAvailablePeriods: (0, smithy_client_1.expectInt32)(output.LookBackAvailablePeriods),
    };
};
const deserializeAws_json1_1IamActionDefinition = (output, context) => {
    return {
        Groups: output.Groups != null ? deserializeAws_json1_1Groups(output.Groups, context) : undefined,
        PolicyArn: (0, smithy_client_1.expectString)(output.PolicyArn),
        Roles: output.Roles != null ? deserializeAws_json1_1Roles(output.Roles, context) : undefined,
        Users: output.Users != null ? deserializeAws_json1_1Users(output.Users, context) : undefined,
    };
};
const deserializeAws_json1_1InstanceIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1InternalErrorException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1InvalidNextTokenException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1InvalidParameterException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1NotFoundException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Notification = (output, context) => {
    return {
        ComparisonOperator: (0, smithy_client_1.expectString)(output.ComparisonOperator),
        NotificationState: (0, smithy_client_1.expectString)(output.NotificationState),
        NotificationType: (0, smithy_client_1.expectString)(output.NotificationType),
        Threshold: (0, smithy_client_1.limitedParseDouble)(output.Threshold),
        ThresholdType: (0, smithy_client_1.expectString)(output.ThresholdType),
    };
};
const deserializeAws_json1_1Notifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Notification(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PlannedBudgetLimits = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = deserializeAws_json1_1Spend(value, context);
        return acc;
    }, {});
};
const deserializeAws_json1_1ResourceLockedException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Roles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ScpActionDefinition = (output, context) => {
    return {
        PolicyId: (0, smithy_client_1.expectString)(output.PolicyId),
        TargetIds: output.TargetIds != null ? deserializeAws_json1_1TargetIds(output.TargetIds, context) : undefined,
    };
};
const deserializeAws_json1_1Spend = (output, context) => {
    return {
        Amount: (0, smithy_client_1.expectString)(output.Amount),
        Unit: (0, smithy_client_1.expectString)(output.Unit),
    };
};
const deserializeAws_json1_1SsmActionDefinition = (output, context) => {
    return {
        ActionSubType: (0, smithy_client_1.expectString)(output.ActionSubType),
        InstanceIds: output.InstanceIds != null ? deserializeAws_json1_1InstanceIds(output.InstanceIds, context) : undefined,
        Region: (0, smithy_client_1.expectString)(output.Region),
    };
};
const deserializeAws_json1_1Subscriber = (output, context) => {
    return {
        Address: (0, smithy_client_1.expectString)(output.Address),
        SubscriptionType: (0, smithy_client_1.expectString)(output.SubscriptionType),
    };
};
const deserializeAws_json1_1Subscribers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Subscriber(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TargetIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ThrottlingException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1TimePeriod = (output, context) => {
    return {
        End: output.End != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.End))) : undefined,
        Start: output.Start != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Start))) : undefined,
    };
};
const deserializeAws_json1_1UpdateBudgetActionResponse = (output, context) => {
    return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        BudgetName: (0, smithy_client_1.expectString)(output.BudgetName),
        NewAction: output.NewAction != null ? deserializeAws_json1_1Action(output.NewAction, context) : undefined,
        OldAction: output.OldAction != null ? deserializeAws_json1_1Action(output.OldAction, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateBudgetResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateNotificationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateSubscriberResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Users = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
