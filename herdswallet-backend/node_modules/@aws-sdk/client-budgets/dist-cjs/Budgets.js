"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Budgets = void 0;
const BudgetsClient_1 = require("./BudgetsClient");
const CreateBudgetActionCommand_1 = require("./commands/CreateBudgetActionCommand");
const CreateBudgetCommand_1 = require("./commands/CreateBudgetCommand");
const CreateNotificationCommand_1 = require("./commands/CreateNotificationCommand");
const CreateSubscriberCommand_1 = require("./commands/CreateSubscriberCommand");
const DeleteBudgetActionCommand_1 = require("./commands/DeleteBudgetActionCommand");
const DeleteBudgetCommand_1 = require("./commands/DeleteBudgetCommand");
const DeleteNotificationCommand_1 = require("./commands/DeleteNotificationCommand");
const DeleteSubscriberCommand_1 = require("./commands/DeleteSubscriberCommand");
const DescribeBudgetActionCommand_1 = require("./commands/DescribeBudgetActionCommand");
const DescribeBudgetActionHistoriesCommand_1 = require("./commands/DescribeBudgetActionHistoriesCommand");
const DescribeBudgetActionsForAccountCommand_1 = require("./commands/DescribeBudgetActionsForAccountCommand");
const DescribeBudgetActionsForBudgetCommand_1 = require("./commands/DescribeBudgetActionsForBudgetCommand");
const DescribeBudgetCommand_1 = require("./commands/DescribeBudgetCommand");
const DescribeBudgetNotificationsForAccountCommand_1 = require("./commands/DescribeBudgetNotificationsForAccountCommand");
const DescribeBudgetPerformanceHistoryCommand_1 = require("./commands/DescribeBudgetPerformanceHistoryCommand");
const DescribeBudgetsCommand_1 = require("./commands/DescribeBudgetsCommand");
const DescribeNotificationsForBudgetCommand_1 = require("./commands/DescribeNotificationsForBudgetCommand");
const DescribeSubscribersForNotificationCommand_1 = require("./commands/DescribeSubscribersForNotificationCommand");
const ExecuteBudgetActionCommand_1 = require("./commands/ExecuteBudgetActionCommand");
const UpdateBudgetActionCommand_1 = require("./commands/UpdateBudgetActionCommand");
const UpdateBudgetCommand_1 = require("./commands/UpdateBudgetCommand");
const UpdateNotificationCommand_1 = require("./commands/UpdateNotificationCommand");
const UpdateSubscriberCommand_1 = require("./commands/UpdateSubscriberCommand");
class Budgets extends BudgetsClient_1.BudgetsClient {
    createBudget(args, optionsOrCb, cb) {
        const command = new CreateBudgetCommand_1.CreateBudgetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createBudgetAction(args, optionsOrCb, cb) {
        const command = new CreateBudgetActionCommand_1.CreateBudgetActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNotification(args, optionsOrCb, cb) {
        const command = new CreateNotificationCommand_1.CreateNotificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSubscriber(args, optionsOrCb, cb) {
        const command = new CreateSubscriberCommand_1.CreateSubscriberCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBudget(args, optionsOrCb, cb) {
        const command = new DeleteBudgetCommand_1.DeleteBudgetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBudgetAction(args, optionsOrCb, cb) {
        const command = new DeleteBudgetActionCommand_1.DeleteBudgetActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNotification(args, optionsOrCb, cb) {
        const command = new DeleteNotificationCommand_1.DeleteNotificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSubscriber(args, optionsOrCb, cb) {
        const command = new DeleteSubscriberCommand_1.DeleteSubscriberCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudget(args, optionsOrCb, cb) {
        const command = new DescribeBudgetCommand_1.DescribeBudgetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgetAction(args, optionsOrCb, cb) {
        const command = new DescribeBudgetActionCommand_1.DescribeBudgetActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgetActionHistories(args, optionsOrCb, cb) {
        const command = new DescribeBudgetActionHistoriesCommand_1.DescribeBudgetActionHistoriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgetActionsForAccount(args, optionsOrCb, cb) {
        const command = new DescribeBudgetActionsForAccountCommand_1.DescribeBudgetActionsForAccountCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgetActionsForBudget(args, optionsOrCb, cb) {
        const command = new DescribeBudgetActionsForBudgetCommand_1.DescribeBudgetActionsForBudgetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgetNotificationsForAccount(args, optionsOrCb, cb) {
        const command = new DescribeBudgetNotificationsForAccountCommand_1.DescribeBudgetNotificationsForAccountCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgetPerformanceHistory(args, optionsOrCb, cb) {
        const command = new DescribeBudgetPerformanceHistoryCommand_1.DescribeBudgetPerformanceHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBudgets(args, optionsOrCb, cb) {
        const command = new DescribeBudgetsCommand_1.DescribeBudgetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNotificationsForBudget(args, optionsOrCb, cb) {
        const command = new DescribeNotificationsForBudgetCommand_1.DescribeNotificationsForBudgetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSubscribersForNotification(args, optionsOrCb, cb) {
        const command = new DescribeSubscribersForNotificationCommand_1.DescribeSubscribersForNotificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    executeBudgetAction(args, optionsOrCb, cb) {
        const command = new ExecuteBudgetActionCommand_1.ExecuteBudgetActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateBudget(args, optionsOrCb, cb) {
        const command = new UpdateBudgetCommand_1.UpdateBudgetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateBudgetAction(args, optionsOrCb, cb) {
        const command = new UpdateBudgetActionCommand_1.UpdateBudgetActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateNotification(args, optionsOrCb, cb) {
        const command = new UpdateNotificationCommand_1.UpdateNotificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateSubscriber(args, optionsOrCb, cb) {
        const command = new UpdateSubscriberCommand_1.UpdateSubscriberCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
exports.Budgets = Budgets;
